{
	"info": {
		"_postman_id": "e954fc09-1832-4965-a67a-761908990051",
		"name": "HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20954104",
		"_collection_link": "https://orange-resonance-601815.postman.co/workspace/Screening_Posman~55480f4c-9161-4905-87c7-086dc278c5f9/collection/20954104-e954fc09-1832-4965-a67a-761908990051?action=share&creator=20954104&source=collection_link"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "get_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(jsonData)\r",
									"\r",
									"// в ответе есть значение Response body:Containce string\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Ameli\");\r",
									"});\r",
									"\r",
									"var reqData = pm.request.url.query.toObject();\r",
									"\r",
									"console.log(reqData)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Ameli&age=3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Ameli"
								},
								{
									"key": "age",
									"value": "3"
								}
							]
						},
						"description": "StartFragment\n\nEP_1\n\nMethod: GET\n\nEndPoint: /get_method\n\nrequest url params: \n\n name: str\n\n age: int\n\n  \n\nresponse: \n\n\\[\n\n    “Str”,\n\n    “Str”\n\n\\]\n\n  \n\n\\=================="
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Gleb",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "900",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"url\", \"http://162.55.220.72:5005\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Gleb",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "900",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/object_info_1?name=Ameli&age=3&weight=13",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Ameli"
								},
								{
									"key": "age",
									"value": "3"
								},
								{
									"key": "weight",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name=Vika&age=33&salary=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Vika"
								},
								{
									"key": "age",
									"value": "33"
								},
								{
									"key": "salary",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Vika&age=33&salary=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Vika"
								},
								{
									"key": "age",
									"value": "33"
								},
								{
									"key": "salary",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Vika&age=33&salary=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Vika"
								},
								{
									"key": "age",
									"value": "33"
								},
								{
									"key": "salary",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ya",
									"type": "text"
								},
								{
									"key": "age",
									"value": "18",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Vika",
									"disabled": true
								},
								{
									"key": "age",
									"value": "33",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "100",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Postman.\n\nHW_1\n\nСоздать запросы в Postman.\n\nProtocol: http\n\nIP: 162.55.220.72\n\nPort: 5005"
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "/first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"\r",
									"// 2. Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Проверить, что в body приходит правильный string.\r",
									"\r",
									"var respData = pm.response.text();\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(respData);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(respData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// http://162.55.220.72:5005/user_info_3\r",
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 3. Спарсить response body в json.\r",
									"\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"var reqData = request.data;\r",
									"console.log(reqData);\r",
									"\r",
									"pm.test(\"1_name в ответе равно name s request\", function () {\r",
									"    pm.expect(reqData.name).to.eql(\"Poppy\");\r",
									"});\r",
									"\r",
									"pm.test(\"2_name в ответе равно name s request\", function () {\r",
									"    pm.expect(respData.name).to.eql(reqData.name);\r",
									"});\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"age в ответе равно age s request\", function () {\r",
									"    pm.expect(reqData.age).to.eql(\"22\");\r",
									"});\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"salary в ответе равно salary s request\", function () {\r",
									"    pm.expect(reqData.salary).to.eql(\"777\");\r",
									"});\r",
									"// 7. Спарсить request.\r",
									"var reqData = request.data;\r",
									"console.log(reqData);\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"2_name в ответе равно name s request\", function () {\r",
									"    pm.expect(respData.name).to.eql(reqData.name);\r",
									"    });\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"2_ age в ответе равно age s request\", function () {\r",
									"    pm.expect(respData.age).to.eql(reqData.age);\r",
									"    });\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"2_ salary в ответе равно salary s request\", function () {\r",
									"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
									"    });\r",
									"// 11. Вывести в консоль параметр family из response.\r",
									"console.log(respData.family)\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"//console.log(reqData.family.u_salary_1_5_year);\r",
									"console.log(+reqData.salary);\r",
									"console.log(respData.family.u_salary_1_5_year);\r",
									"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function () {\r",
									"       pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Poppy",
									"type": "text"
								},
								{
									"key": "age",
									"value": "22",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "777",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// http://162.55.220.72:5005/object_info_3\r",
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 3. Спарсить response body в json.\r",
									"    var respData = pm.response.json();\r",
									"    console.log(respData)\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData);\r",
									"  \r",
									"// 4. Спарсить request.\r",
									"var reqData = pm.request.url.query.toObject();\r",
									"\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name в ответе равно name s request\", function () {\r",
									"    pm.expect(respData.name).to.eql(reqData.name);\r",
									"});\r",
									"console.log(respData.name);\r",
									"console.log(reqData.name);\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"age в ответе равно age s request\", function () { \r",
									"    pm.expect(respData.age).to.eql(reqData.age);\r",
									"});\r",
									"console.log(respData.age);\r",
									"console.log(reqData.age);\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"salary в ответе равно salary s request\", function () {\r",
									"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
									"});\r",
									"\r",
									"console.log(respData.salary);\r",
									"console.log(+reqData.salary);\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(respData.family);\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"\r",
									"console.log(respData.family.pets.dog);\r",
									"\r",
									"pm.test(\"namename\", function () {\r",
									"    pm.expect(pm.response.text(\"dog\")).to.include(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"у параметра dog есть параметры name\", function () {\r",
									"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// через Response body: JSON value check - меняю to.eql на .to.have.property\r",
									"pm.test(\"у параметра dog есть параметры name\", function () {\r",
									"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"параметра dog есть параметры age\", function () {\r",
									"    pm.expect(respData.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"параметр name имеет значение Luky\", function () {\r",
									"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"console.log(respData.family.pets.dog.name);\r",
									"\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"параметр age имеет значение 4\", function () {\r",
									"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									"\r",
									"console.log(respData.family.pets.dog.age);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=33&salary=555",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Vika"
								},
								{
									"key": "age",
									"value": "33"
								},
								{
									"key": "salary",
									"value": "555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// http://162.55.220.72:5005/object_info_4\r",
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 3. Спарсить response body в json.\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var reqData = pm.request.url.query.toObject();\r",
									"console.log(reqData);\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name в ответе равно name s request\", function () {\r",
									"    pm.expect(respData.name).to.eql(reqData.name);\r",
									"});\r",
									"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"age в ответе равно age из request\", function () {\r",
									"    pm.expect(respData.age).to.eql(+reqData.age);\r",
									"});\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"console.log(reqData.salary);\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(respData.salary);\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(respData.salary[0]);\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(respData.salary[1]);\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(respData.salary[2]);\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"salary равен salary из request\", function () {\r",
									"    var reqSalary = reqData.salary;\r",
									"    pm.expect(+reqData.salary).to.eql(respData.salary[0]);\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"1-й элемент параметра salary равен salary*2 из request\", function () {\r",
									"    pm.expect(reqData.salary*2).to.eql(+respData.salary[1]);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"2-й элемент параметра salary равен salary*3 из request\", function () {\r",
									"    pm.expect(reqData.salary*3).to.eql(+respData.salary[2]);\r",
									"});\r",
									"// 15. Создать в окружении переменную name\r",
									"pm.environment.set(\"name\", reqData.name);\r",
									"\r",
									"// 16. Создать в окружении переменную age\r",
									"pm.environment.set(\"age\", reqData.age);\r",
									"\r",
									"// 17. Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary\", reqData.salary);\r",
									"\r",
									"// 18. Передать в окружение переменную name\r",
									"pm.environment.set(\"name_1\", \"Vika\");\r",
									"\r",
									"// 19. Передать в окружение переменную age\r",
									"pm.environment.set(\"age_1\", \"33\");\r",
									"\r",
									"// 20. Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary_1\", \"777\");\r",
									"\r",
									"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"var respSalary = respData.salary;\r",
									"console.log(respSalary);\r",
									"\r",
									"console.log(\"respSalary = \", respSalary)\r",
									"\r",
									"let i = 0;\r",
									"while (i < respSalary.length) {\r",
									"    console.log(respSalary[i])\r",
									"    i++\r",
									"};\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Ameli&age=3&salary=100500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Ameli"
								},
								{
									"key": "age",
									"value": "3"
								},
								{
									"key": "salary",
									"value": "100500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// http://162.55.220.72:5005/user_info_2\r",
									"// 1. Вставить параметр salary из окружения в request\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"// 4. Отправить запрос.\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 6. Спарсить response body в json.\r",
									"    var respData = pm.response.json();\r",
									"    console.log(respData);\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var reqData = request.data;\r",
									"console.log(reqData);\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
									"});\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
									"});\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"json response имеет параметр qa_salary_after_1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1\");\r",
									"});\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"json response имеет параметр qa_salary_after_3\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3\");\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"json response имеет параметр person\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"person\");\r",
									"});\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"параметр start_qa_salary равен salary из request\", function () {\r",
									"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary);\r",
									"console.log(respData.start_qa_salary);\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"параметр qa_salary_after_6_months равен salary*2\", function () {\r",
									"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary*2);\r",
									"console.log(respData.qa_salary_after_6_months);\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request \", function () {\r",
									"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary*2.7);\r",
									"console.log(respData.qa_salary_after_12_months);\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"параметр qa_salary_after_1.5_year равен salary*3.3 из request \", function () {\r",
									"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary*3.3);\r",
									"console.log(respData[\"qa_salary_after_1.5_year\"]);\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"параметр qa_salary_after_3.5_years равен salary*3.8 из request \", function () {\r",
									"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary*3.8);\r",
									"console.log(respData[\"qa_salary_after_3.5_years\"]);\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\" параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
									"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);\r",
									"});\r",
									"console.log(respData.person.u_name[1]);\r",
									"console.log(+reqData.salary);\r",
									"\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"параметр u_age равен age из request\", function () {\r",
									"    pm.expect(respData.person.u_age).to.eql(+reqData.age);\r",
									"});\r",
									"console.log(respData.person.u_age);\r",
									"console.log(+reqData.age);\r",
									"\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request\", function () {\r",
									"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
									"});\r",
									"\r",
									"console.log(+reqData.salary*4.2);\r",
									"console.log(respData.person.u_salary_5_years);\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Приходящий токен необходимо передать во все остальные запросы.\r",
									"\r",
									"// ===================\r",
									"// дальше все запросы требуют наличие токена.\r",
									"// ===================\r",
									"var respData = pm.response.json();\r",
									"\r",
									"    console.log(respData);\r",
									"\r",
									"var respToken = respData.token;\r",
									"\r",
									"   console.log(respToken);    \r",
									"\r",
									"pm.environment.set(\"token\", respToken );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "likhatskaya.vi",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Avgust20",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тесты:\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid/Проверка структуры json в ответе', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"// resp.\r",
									"// {'start_qa_salary':salary,\r",
									"//  'qa_salary_after_6_months': salary * 2,\r",
									"//  'qa_salary_after_12_months': salary * 2.9,\r",
									"//  'person': {'u_name':[user_name, salary, age],\r",
									"//                                 'u_age':age,\r",
									"//                                 'u_salary_1.5_year': salary * 4}\r",
									"//                                 }\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"\r",
									"var  reqData = JSON.parse(request.data);\r",
									"console.log(reqData);\r",
									"\r",
									"var reqSalary = reqData.salary;\r",
									"console.log(reqSalary);\r",
									"\r",
									"pm.test(\"qa_salary_after_6_months\", function () {\r",
									"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqSalary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"qa_salary_after_12_months\", function () {\r",
									"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqSalary*2.9);\r",
									"});\r",
									"\r",
									"pm.test(\"u_salary_1.5_year\", function () {\r",
									"    pm.expect(respData.person.u_salary_1_5_year).to.eql(reqSalary*4);\r",
									"});\r",
									"\r",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"\r",
									"var u_salary_1_5_year = respData.person.u_salary_1_5_year;\r",
									"console.log(u_salary_1_5_year);\r",
									"\r",
									"pm.environment.set(\"u_salary_1_5_year\", u_salary_1_5_year);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{   \"age\": 33,\r\n    \"salary\": 777,\r\n    \"name\": \"Vika\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Resp.\r",
									"// {'name':name,\r",
									"//   'age': int(age),\r",
									"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
									"\r",
									"// Тесты:\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"salary\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"name\",\r",
									"        \"salary\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test('Schema is valid/Проверка структуры json в ответе', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"// 'salary': [salary, str(salary*2), str(salary*3)]}\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"var respSalary_0 = respData.salary[0];\r",
									"var respSalary_1 = respData.salary[1]\r",
									"var respSalary_2 = respData.salary[2]\r",
									"\r",
									"console.log(respSalary_0);\r",
									"console.log(respSalary_1);\r",
									"console.log(respSalary_2);\r",
									"\r",
									"var reqSalary = request.data.salary;\r",
									"console.log(reqSalary);\r",
									"\r",
									"pm.test(\"salary\", function () {\r",
									"    pm.expect(respSalary_0).to.eql(+reqSalary);\r",
									"});\r",
									"\r",
									"pm.test(\"salary*2\", function () {\r",
									"    pm.expect(+respSalary_1).to.eql(reqSalary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"salary*3\", function () {\r",
									"    pm.expect(+respSalary_2).to.eql(reqSalary*3);\r",
									"});\r",
									"\r",
									"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"\r",
									"pm.test(\"проверить, что 2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
									"    pm.expect\r",
									"if (respSalary_2 > respSalary_1 && respSalary_2 > respSalary_0){\r",
									"    console.log('Result == TRUE')\r",
									"} else{\r",
									"    console.log('Result == FALSE')\r",
									"};\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary_1}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Resp.\r",
									"// {'name': name,\r",
									"//  'age': age,\r",
									"//  'daily_food':weight * 0.012,\r",
									"//  'daily_sleep': weight * 2.5}\r",
									"\r",
									"\r",
									"// Тесты:\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"//  'daily_food':weight * 0.012,\r",
									"//  'daily_sleep': weight * 2.5\r",
									"\r",
									"var reqWeight = +request.data.weight;\r",
									"console.log(reqWeight);\r",
									"\r",
									"var respData = pm.response.json();\r",
									"var respD_F = respData.daily_food;\r",
									"var respD_S = respData.daily_sleep;\r",
									"\r",
									"console.log(respD_F);\r",
									"console.log(respD_S);\r",
									"\r",
									"pm.test(\"daily_food':weight * 0.012\", function () {\r",
									"    pm.expect(respD_F).to.eql(+reqWeight*0.012);\r",
									"});\r",
									"\r",
									"pm.test(\"daily_sleep': weight * 2.5\", function () {\r",
									"    pm.expect(respD_S).to.eql(+reqWeight*2.5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age_1}}",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "65",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name_1}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тесты:\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"// 2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
									"var respData = pm.response.json();\r",
									"console.log(respData);\r",
									"\r",
									"var varName = pm.variables.get(\"name\");\r",
									"console.log(varName);\r",
									"\r",
									"var respName = respData.name;\r",
									"console.log(respName);\r",
									"\r",
									"pm.test(\"занчение поля name = значению переменной name из окружения\", function () {\r",
									"    pm.expect(respName).to.eql(varName);\r",
									"});\r",
									"\r",
									"\r",
									"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"\r",
									"var respAge = respData.age\r",
									"console.log(respAge);\r",
									"var reqAge = request.data.age;\r",
									"console.log(reqAge);\r",
									"\r",
									"pm.test(\"занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
									"    pm.expect(reqAge).to.eql(respAge);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тесты:\r",
									"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
									"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"\r",
									"var respData = pm.response.json();\r",
									"\r",
									"console.log(respData);\r",
									"\r",
									"var objRandom = respData[Math.floor(Math.random() * respData.length)];\r",
									"console.log(objRandom);\r",
									"\r",
									"pm.environment.set(\"Cur_ID\", objRandom.Cur_ID);\r",
									"console.log(objRandom);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тесты:\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============\r",
									"// ***\r",
									"// 1) получить список валют\r",
									"// 2) итерировать список валют\r",
									"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
									"// 4) если возвращается 500 код, переходим к следующей итреации\r",
									"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
									"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
									"// {\r",
									"//     \"Cur_Abbreviation\": str\r",
									"//     \"Cur_ID\": int,\r",
									"//     \"Cur_Name\": str,\r",
									"//     \"Cur_OfficialRate\": float,\r",
									"//     \"Cur_Scale\": int,\r",
									"//     \"Date\": str\r",
									"// }\r",
									"// 7) переходим к следующей итерации\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\nДЗ_3 Postman\n\n\\=====\n\n  \n\n1) необходимо залогиниться\n\nPOST\n\nhttp://162.55.220.72:5005/login\n\nlogin : str (кроме /)\n\npassword : str\n\n  \n\nПриходящий токен необходимо передать во все остальные запросы.\n\n  \n\n\\===================\n\nдальше все запросы требуют наличие токена.\n\n\\===================\n\n  \n\n2) http://162.55.220.72:5005/user_info\n\nreq. (RAW JSON)\n\nPOST\n\nage: int\n\nsalary: int\n\nname: str\n\nauth_token\n\n  \n  \n\nresp.\n\n{'start_qa_salary':salary,\n\n 'qa_salary_after_6_months': salary \\* 2,\n\n 'qa_salary_after_12_months': salary \\* 2.9,\n\n 'person': {'u_name':\\[user_name, salary, age\\],\n\n                                'u_age':age,\n\n                                'u_salary_1.5_year': salary \\* 4}\n\n                                }\n\n  \n\nТесты:\n\n1) Статус код 200\n\n2) Проверка структуры json в ответе.\n\n3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\n\n4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\n\n\\===================\n\n  \n\n3) http://162.55.220.72:5005/new_data\n\nreq.\n\nPOST\n\nage: int\n\nsalary: int\n\nname: str\n\nauth_token\n\n  \n\nResp.\n\n{'name':name,\n\n  'age': int(age),\n\n  'salary': \\[salary, str(salary\\*2), str(salary\\*3)\\]}\n\n  \n\nТесты:\n\n1) Статус код 200\n\n2) Проверка структуры json в ответе.\n\n3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\n\n4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\n\n\\===================\n\n  \n\n4) http://162.55.220.72:5005/test_pet_info\n\nreq.\n\nPOST\n\nage: int\n\nweight: int\n\nname: str\n\nauth_token\n\n  \n  \n\nResp.\n\n{'name': name,\n\n 'age': age,\n\n 'daily_food':weight \\* 0.012,\n\n 'daily_sleep': weight \\* 2.5}\n\n  \n  \n\nТесты:\n\n1) Статус код 200\n\n2) Проверка структуры json в ответе.\n\n3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\n\n  \n\n\\===================\n\n  \n\n5) http://162.55.220.72:5005/get_test_user\n\nreq.\n\nPOST\n\nage: int\n\nsalary: int\n\nname: str\n\nauth_token\n\n  \n\nResp.\n\n{'name': name,\n\n 'age':age,\n\n 'salary': salary,\n\n 'family':{'children':\\[\\['Alex', 24\\],\\['Kate', 12\\]\\],\n\n 'u_salary_1.5_year': salary \\* 4}\n\n  }\n\n  \n\nТесты:\n\n1) Статус код 200\n\n2) Проверка структуры json в ответе.\n\n3) Проверить что занчение поля name = значению переменной name из окружения\n\n4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\n\n  \n\n\\===================\n\n  \n\n6) http://162.55.220.72:5005/currency\n\nreq.\n\nPOST\n\nauth_token\n\n  \n\nResp. Передаётся список массив объектов.\n\n\\[\n\n{\"Cur_Abbreviation\": str,\n\n \"Cur_ID\": int,\n\n \"Cur_Name\": str\n\n}\n\n…\n\n{\"Cur_Abbreviation\": str,\n\n \"Cur_ID\": int,\n\n \"Cur_Name\": str\n\n}\n\n\\]\n\n  \n\nТесты:\n\n1) Можете взять любой объект из присланного списка, используйте js random.\n\nВ объекте возьмите Cur_ID и передать через окружение в следующий запрос.\n\n  \n\n ===================\n\n  \n\n7) http://162.55.220.72:5005/curr_byn\n\nreq.\n\nPOST\n\nauth_token\n\ncurr_code: int\n\n  \n\nResp.\n\n{\n\n    \"Cur_Abbreviation\": str\n\n    \"Cur_ID\": int,\n\n    \"Cur_Name\": str,\n\n    \"Cur_OfficialRate\": float,\n\n    \"Cur_Scale\": int,\n\n    \"Date\": str\n\n}\n\n  \n\nТесты:\n\n1) Статус код 200\n\n2) Проверка структуры json в ответе.\n\n  \n\nEndFragment"
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72:5005"
		}
	]
} 
